/*
 * LCD_program.c
 *
 * Created: 8/26/2023 9:57:54 PM
 *  Author: ahmed
 */ 
#define F_CPU 16000000UL
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"
#include <util/delay.h>





void LCD_init(void)
{
	//initialize LCD pins as output
	DIO_setPinDirection(LCD_RS_PORT,LCD_RS_PIN, DIO_PIN_OUTPUT);
	DIO_setPinDirection(LCD_RW_PORT,LCD_RW_PIN, DIO_PIN_OUTPUT);
	DIO_setPinDirection(LCD_EN_PORT,LCD_EN_PIN, DIO_PIN_OUTPUT);
	DIO_setPinDirection(LCD_D4_PORT,LCD_D4_PIN, DIO_PIN_OUTPUT);
	DIO_setPinDirection(LCD_D5_PORT,LCD_D5_PIN, DIO_PIN_OUTPUT);
	DIO_setPinDirection(LCD_D6_PORT,LCD_D6_PIN, DIO_PIN_OUTPUT);
	DIO_setPinDirection(LCD_D7_PORT,LCD_D7_PIN, DIO_PIN_OUTPUT);
	
	_delay_ms(40);
	
	// set rs pin=0 (write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
	
	// set rw pin=0 (activate write not read)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
	
	private_writeHalfPort(0b0010);
	
	//enable
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);

	//function set command 2*16 , 4-bit mode
	LCD_sendComand(0b00101000);
	
	_delay_us(45);
	LCD_sendComand(0b00001111);
	_delay_us(45);
	LCD_sendComand(0b00000001);
	_delay_ms(2);	
	LCD_sendComand(0b00000110);
	

}								

void LCD_sendComand(u8 cmnd)
{
	// set rs pin=0 (write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
	
	// set rw pin=0 (activate write not read)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
	
//send command
	private_writeHalfPort(cmnd>>4);
//enable
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
//send command
	private_writeHalfPort(cmnd);
//enable
   DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
   _delay_ms(1);
   DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}



void LCD_sendChar(u8 data)
{
	// set rs pin=1 (write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
	
	// set rw pin=0 (activate write not read)
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
	
	//send command
	private_writeHalfPort(data>>4);
	//enable
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	//send command
	private_writeHalfPort(data);
	//enable
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

static void private_writeHalfPort(u8 value)
{
	
	if(GET_BIT(value,0)==1)
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
	}
	else
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
	}
	if(GET_BIT(value,1)==1)
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
	}
	if(GET_BIT(value,2)==1)
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
	}
	if(GET_BIT(value,3)==1)
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
	}

}

void LCD_writeString(u8* string)
{
	u8 counter=0;
	while(string[counter]!='\0')
	{
		LCD_sendChar(string[counter]);
		++counter;
	}
}

void LCD_clear(void)
{
	LCD_sendComand(0b00000001);
	_delay_ms(2);
}
void LCD_sendNumber( u32 num)
{ 
       s8 i=0;
       u8 rem, arr[16];

       if(num<0)
       {
		   LCD_sendChar('-');
		   num=num* -1;
       }
	   else if (num==0)
	   {
		   LCD_sendChar('0');
	   }
	   while (num!=0)
	   {
		   rem=num%10;
		   arr[i]=rem;
		   num=num/10;
		   i++;
	   }
	   for(i=i-1; i>=0; i--)
	   {
		   LCD_sendChar(arr[i]+ '0');
	   }
}
